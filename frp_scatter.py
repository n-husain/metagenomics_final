# -*- coding: utf-8 -*-
"""frp_scatter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qDp1VTVqSdeJNHS4pUA6KWMJDkev9yAz
"""

#install our packages
!pip install numpy
!pip install plotly

#lets load from our packages
import pandas as pd
import plotly.graph_objs as go
import plotly.plotly as py
import plotly
from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot
import io

#allows us to run plotly inline
#@title Default title text
def configure_plotly_browser_state():
  import IPython
  display(IPython.core.display.HTML('''
        <script src="/static/components/requirejs/require.js"></script>
        <script>
          requirejs.config({
            paths: {
              base: '/static/base',
              plotly: 'https://cdn.plot.ly/plotly-latest.min.js?noext',
            },
          });
        </script>
        '''))

#Load our data that is in .csv format. The one supplied was titled: final_genome.csv
#Due to our files being so large, this may take a couple mins
from google.colab import files
uploaded = files.upload()

#sanity check
df.head()

#Lines needed for plot.ly to work inline..again.Annoying
configure_plotly_browser_state()

#API Key from plot.ly. Sign up! It's Free!
init_notebook_mode(connected=False)
plotly.tools.set_credentials_file(username='USERNAME', api_key='XXXXXXXXXXX')


#create dataframe of information from .csv
df = pd.read_csv(io.StringIO(uploaded['final_genome.csv'].decode('utf-8')), sep = ',')

#Select columns that are needed, which are adpated from our script.py
#we opted for the initials of the sample as our dataframe
dfhp = df[df.Name == 'helicobacter_pylori'] 
dfbv = df[df.Name == 'Bacteroides_vulgatus']
dfab = df[df.Name == 'Acinetobacter_baumannii']
dflm = df[df.Name == 'listeria_monocytogenes']
dfrs = df[df.Name == 'rhodobacter_sphaeroides']
dfsp = df[df.Name == 'streptococcus_pneumoniae']

#create FRP using a scatterplot
fig = {
    'data': [
		        {	
		        	'type': 'scattergl', 
                    #in our discusstion with plot.ly dev, we were told that a 
                    #scattergl would be best due to the sheer size of our data
		            'x': dfhp.I_Begin/100000, #for Scaling purposes we devided by 100000
		            'y': dfhp.Identity, 
		            'text': dfhp.ReadName, 
		            'mode': 'markers',
		            'marker': dict(
		            	size = 2), #make markers small(er)
		            'name': 'Helicobacter_Pylori'},
		        {	
		        	'type': 'scattergl',
		            'x': dfbv.I_Begin/100000, 
		            'y': dfbv.Identity, 
		            'text': dfbv.ReadName, 
		            'mode': 'markers', 
		            'marker': dict(
		            	size = 2),		            
		            'name': 'Bacteroides_vulgatus'},
		        {	
		        	'type': 'scattergl',
		            'x': dfab.I_Begin/100000, 
		            'y': dfab.Identity, 
		            'text': dfab.ReadName, 
		            'mode': 'markers', 
		            'marker': dict(
		            	size = 2),		            
		            'name': 'Acinetobacter_baumannii'},
		        {	
		        	'type': 'scattergl',
		            'x': dflm.I_Begin/100000, 
		            'y': dflm.Identity, 
		            'text': dflm.ReadName, 
		            'mode': 'markers',
		            'marker': dict(
		            	size = 2),		           
		            'name': 'listeria_monocytogenes'},
		        {	
		        	'type': 'scattergl',
		            'x': dfrs.I_Begin/100000, 
		            'y': dfrs.Identity, 
		            'text': dfrs.ReadName, 
		            'mode': 'markers',
		            'marker': dict(
		            	size = 2),		             
		            'name': 'rhodobacter_sphaeroides'},
		        {	
		        	'type': 'scattergl',
		            'x': dfsp.I_Begin/100000, 
		            'y': dfsp.Identity, 
		            'text': dfsp.ReadName, 
		            'mode': 'markers',
		            'marker': dict(
		            	size = 2),		             
		            'name': 'streptococcus_pneumoniae'},

    ],
    'layout': {
        'xaxis': {'title': "I_Begin"},
        'yaxis': {'title': "Identity"}
    }
}

#display plot inline
py.iplot(fig)

()
